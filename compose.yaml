version: "3.1"

services:

  mongo:
    profiles: [ "mongo", "user_data" ]
    image: mongo
    container_name: mongo
    restart: always
    volumes:
      - mongodbdata:/data/db
    ports:
      - 27017:27017
    networks:
      - dataplaynet
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
  mongo-express:
    profiles: [ "mongo", "user_data" ]
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    networks:
      - dataplaynet
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo
      ME_CONFIG_MONGODB_URL: mongodb://mongo:mongo@mongo:27017/
      ME_CONFIG_BASICAUTH:


  redis:
    profiles: [ "redis", "cache" ]
    image: redis
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - dataplaynet
    command: redis-server --save 60 1 --enable-debug-command yes --loglevel warning
    volumes:
      - redisdata:/data
  redisinsight:
    profiles: [ "redis", "cache" ]
    image: redis/redisinsight
    container_name: redisinsight
    restart: always
    ports:
      - 5540:5540
    networks:
      - dataplaynet
    volumes:
      - redisinsightdata:/data

  cassandra1:
    profiles: [ "cassandra", "distributed" ]
    image: cassandra
    container_name: cassandra1
    ports:
      - 9042:9042
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
      - CASSANDRA_SEEDS=cassandra1,cassandra2
    networks:
      - dataplaynet
    volumes:
      - ./conf/cassandra1.yaml:/etc/cassandra/cassandra.yaml

  cassandra2:
    profiles: [ "cassandra", "distributed" ]
    image: cassandra
    container_name: cassandra2
    ports:
      - 9043:9042
    environment:
      - CASSANDRA_USER=admin
      - CASSANDRA_PASSWORD=admin
      - CASSANDRA_SEEDS=cassandra1,cassandra2
    networks:
      - dataplaynet
    volumes:
      - ./conf/cassandra2.yaml:/etc/cassandra/cassandra.yaml

  neo4j:
    profiles: [ "neo4j", "rel_map" ]
    image: neo4j
    container_name: neo4j
    restart: always
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - dataplaynet
    environment:
      - NEO4J_AUTH=none
    volumes:
      - neo4jdata:/data

  elasticsearch:
    profiles: [ "elasticsearch", "search" ]
    image: elasticsearch:8.14.3
    container_name: elasticsearch
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    networks:
      - dataplaynet
    volumes:
      - elasticsearchdata:/usr/share/elasticsearch/data
  kibana:
    profiles: [ "elasticsearch", "search" ]
    image: kibana:8.14.3
    container_name: kibana
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - dataplaynet
    volumes:
      - kibanadata:/usr/share/kibana/data

  weaviate:
    profiles: [ "weaviate", "similarity_search" ]
    image: cr.weaviate.io/semitechnologies/weaviate:1.26.1
    container_name: weaviate
    ports:
      - 8080:8080
      - 50051:50051
    networks:
      - dataplaynet
    restart: on-failure:0
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_MODULES: 'text2vec-transformers,qna-transformers,backup-filesystem'
      DEFAULT_VECTORIZER_MODULE: text2vec-transformers
      TRANSFORMERS_INFERENCE_API: http://t2v_transformers:8080
      QNA_INFERENCE_API: "http://qna_transformers:8080"
      CLUSTER_HOSTNAME: 'node1'
      BACKUP_FILESYSTEM_PATH: '/tmp/backups'
    volumes:
      - weaviatedata:/var/lib/weaviate
  t2v-transformers:
    profiles: [ "weaviate", "similarity_search" ]
    image: cr.weaviate.io/semitechnologies/transformers-inference:snowflake-snowflake-arctic-embed-xs-onnx
    container_name: t2v_transformers
    networks:
      - dataplaynet
  qna-transformers:
    profiles: [ "weaviate", "similarity_search" ]
    image: cr.weaviate.io/semitechnologies/qna-transformers:bert-large-uncased-whole-word-masking-finetuned-squad
    container_name: qna_transformers
    networks:
      - dataplaynet
    environment:
      ENABLE_CUDA: '0'
      NVIDIA_VISIBLE_DEVICES: none

  timescaledb:
    profiles: [ "timescaledb", "timeseries" ]
    image: timescale/timescaledb-ha:pg17
    container_name: timescale
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: timescaledb
      POSTGRES_PASSWORD: timescaledb
      TIMESCALEDB_TELEMETRY: 'off'
    networks:
      - dataplaynet
    volumes:
      - timescale_vol:/var/lib/postgresql/data
  db_adminer:
    profiles: [ "timescaledb", "timeseries" ]
    container_name: db_adminer
    image: adminer
    ports:
      - 8080:8080
    networks:
      - dataplaynet
    restart: always

networks:
  dataplaynet:
    external: true

volumes:
  mongodbdata:
  redisdata:
  redisinsightdata:
  neo4jdata:
  elasticsearchdata:
  kibanadata:
  weaviatedata:
  timescale_vol:
